/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package stellarstation.api.v1.radio;

option go_package = "radio";

option java_multiple_files = true;
option java_outer_classname = "RadioProto";
option java_package = "com.stellarstation.api.v1.radio";

// Messages for modeling radio devices (e.g., receivers, transmitters) in API messages.

// A radio device for RF communication. Usually, a satellite will have one or more radio devices for
// communicating with the ground and a ground station will have one or more radio devices for
// communicating with the satellite. Such devices may not actually correspond to actual hardware
// devices, i.e., in the case of Software Defined Radio (SDR).
message RadioDevice {
  // The center frequency of the device, in Hz.
  uint64 center_frequency_hz = 1;

  // The protocol used by this device when doing RF communication.
  CommunicationProtocol protocol = 2;
}

// A communication protocol used with a radio device. These must contain all the parameters
// needed to configure the device for use either in transmission or reception.
message CommunicationProtocol {
  // The type of modulation used by this radio device.
  Modulation modulation = 1;

  // The type of framing used for communication on the device. If `bitstream`, the device is only
  // demodulating / modulating without applying any higher-level framing (i.e., packeting) protocol.
  oneof Framing {
    BitStream bitstream = 2;

    Ax25 ax25 = 3;
  }
}

// Communication of a stream of bits with no framing defined.
message BitStream {
}

// PACKET communication based on AX.25. https://www.sigidwiki.com/wiki/PACKET.
message Ax25 {
  // Bit rate, e.g. 9600 for FSK9600, 1200 for AFSK1200.
  uint64 bit_rate = 1;

  // Whether or not G3RUH scrambling is used.
  bool g3ruh = 2;

  // Destination callsign.
  string destination_callsign = 3;

  // Destination SSID.
  uint32 destination_ssid = 4;

  // Source callsign.
  string source_callsign = 5;

  // Source SSID.
  uint32 source_ssid = 6;
}

  // Type of modulation.
enum Modulation {
  // Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying
  FSK = 0;

  // Audio Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying#Audio_FSK
  AFSK = 1;

  // Binary Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)
  BPSK = 2;
}
