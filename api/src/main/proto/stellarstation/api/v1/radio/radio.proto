/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package stellarstation.api.v1.radio;

option go_package = "github.com/infostellarinc/go-stellarstation/api/v1/radio";

option java_multiple_files = true;
option java_outer_classname = "RadioProto";
option java_package = "com.stellarstation.api.v1.radio";

// Messages for modeling radio device (e.g., receivers, transmitters) configuration in API messages.

// A radio device for RF communication. Usually, a satellite will have one or more radio devices for
// communicating with the ground and a ground station will have one or more radio devices for
// communicating with the satellite. Such devices may not actually correspond to actual hardware
// devices, i.e., in the case of Software Defined Radio (SDR).
message RadioDeviceConfiguration {
  // The center frequency of the device, in Hz.
  uint64 center_frequency_hz = 1;

  // The type of modulation used by this radio device.
  Modulation modulation = 2;

  // The bitrate used during modulation.
  uint64 bitrate = 3;

  // The protocol used by this device when doing RF communication. If unset, the device is only
  // demodulating / modulating without applying any higher-level communication protocol.
  CommunicationProtocol protocol = 4;
}

// A communication protocol used with a radio device. These must contain all the parameters
// needed to configure the device for use either in transmission or reception.
message CommunicationProtocol {
  // The type of framing used for communication on the device. If `bitstream`, the device is only
  // demodulating / modulating without applying any higher-level framing (i.e., packeting) protocol.
  oneof Framing {
    // AX.25 protocol settings.
    AX25 ax25 = 1;
  }
}

// Communication of a stream of bits with no framing defined.
message BitStream {
}

// PACKET communication based on AX.25. https://www.sigidwiki.com/wiki/PACKET.
message AX25 {
  // Whether or not G3RUH scrambling is used.
  bool g3ruh = 1;

  // Destination callsign.
  string destination_callsign = 2;

  // Destination SSID.
  uint32 destination_ssid = 3;

  // Source callsign.
  string source_callsign = 4;

  // Source SSID.
  uint32 source_ssid = 5;
}

// Type of modulation. Modulation is the process of converting binary data (0's and 1's) to
// an analog wave for use in radio communication.
enum Modulation {
  // Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying
  FSK = 0;

  // Audio Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying#Audio_FSK
  AFSK = 1;

  // Binary Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)
  BPSK = 2;

  // Multiple Frequency Shift Keying. https://en.wikipedia.org/wiki/Multiple_frequency-shift_keying
  MFSK = 3;

  // Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Quadrature_phase-shift_keying_(QPSK)
  QPSK = 4;

  // 8-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK8 = 5;

  // 16-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK16 = 6;

  // 32-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK32 = 7;

  // 64-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK64 = 8;

  // 128-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK128 = 9;

  // 256-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
  PSK256 = 10;


  // Differential Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Differential_phase-shift_keying_(DPSK)
  DPSK = 11;

  // Offset Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Offset_QPSK_(OQPSK)
  OQPSK = 12;


  // 8-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM8 = 13;

  // 16-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM16 = 14;

  // 32-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM32 = 15;

  // 64-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM64 = 16;

  // 128-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM128 = 17;

  // 256-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
  QAM256 = 18;


  // Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying
  MSK = 19;

  // Gaussian Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying#Gaussian_minimum-shift_keying
  GMSK = 20;


  // Amplitude modulation (generic)
  AM = 21;

  // Frequency modulation (generic)
  FM = 22;

  // Phase modulation (generic)
  PM = 23;

  // Pulse-code modulation (generic)
  PCM = 24;
}

// Line coding applied during modulation. Line coding is the technique for modeling binary 0 and 1
// within a modulated waveform.
enum LineCoding {
  // Non-return-to-zero level. https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_L = 0;

  // Non-return-to-zero mark. https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_M = 1;

  // Non-return-to-zero space. https://en.wikipedia.org/wiki/Non-return-to-zero
  NRZ_S = 2;

  // Return-to-zero. https://en.wikipedia.org/wiki/Return-to-zero
  RZ = 3;

  // Bipolar return-to-zero level. https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_L = 4;

  // Bipolar return-to-zero mark. https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_M = 5;

  // Bipolar return-to-zero space. https://en.wikipedia.org/wiki/Bipolar_encoding
  BP_S = 6;
}

message ViterbiMode {
  // A type of Viterbi convolutional coding applied to a bitstream.
  // https://en.wikipedia.org/wiki/Convolutional_code
  enum ViterbiMode {
    // No Viterbi coding.
    OFF = 0;

    // Only Viterbi descrambling.
    DESCRAMBLING = 1;

    // Only Viterbi decoding.
    DECODING = 2;

    // Only inverted Viterbi decoding.
    DECODING_INVERTED = 3;

    // Viterbi decoding and descrambling.
    DECODING_DESCRAMBLING = 4;

    // Inverted Viterbi decoding and descrambling.
    DECODING_INVERTED_DESCRAMBLING = 5;
  }
}

message ReedSolomonMode {
  // A type of Reed-Solomon error correction applied to a bitstream.
  // https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction
  enum ReedSolomonMode {
    // No Reed-Solomon error correction.
    OFF = 0;

    // Alpha Reed-Solomon error correction.
    ALPHA = 1;

    // Beta Reed-Solomon error correction.
    BETA = 2;
  }
}

message FrameCheckingMode {
  // A type of frame error checking applied to a bitstream.
  enum FrameCheckingMode {
    // No frame error checking.
    OFF = 0;

    // Cyclic redundancy check.
    CRC = 1;

    // Generic checksum.
    CHECKSUM = 2;
  }
}

message ViterbiStatus {
  // A current status of Viterbi convolutional coding.
  enum ViterbiStatus {
    // Not locked on.
    UNLOCKED = 0;

    // Locked onto the in-phase signal.
    I_LOCKED = 1;

    // Locked onto the quadrature signal.
    Q_LOCKED = 2;

    // Locked onto both in-phase and quadrature signal.
    LOCKED = 3;
  }
}
