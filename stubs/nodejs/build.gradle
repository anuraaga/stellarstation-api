/*
 * Copyright 2018 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java' // Required by gradle plugin but we don't generate Java here
apply plugin: 'com.google.protobuf'
apply plugin: 'com.moowork.node'

def GRPC_TOOLS_VERSION = '1.6.6'
def GRPC_TOOLS_TS_VERSION = '2.3.1'

def GRPC_VERSION = '1.14.1'
def GOOGLE_PROTOBUF_VERSION = '3.6.1'

dependencies {
    protobuf project(':api')
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    generateProtoTasks {
        all().each {task ->
            task.builtins {
                js {
                    option 'import_style=commonjs,binary'
                    outputSubDir = '../../../../web'
                }

                remove java
            }
            task.plugins {
                grpc_node {
                    outputSubDir = '../../../../web'
                }
                grpc_ts {
                    outputSubDir = '../../../../web'
                }
            }
        }
    }
    plugins {
        grpc_node {
            path = file('node_modules/grpc-tools/bin/grpc_node_plugin')
        }
        grpc_ts {
            path = file('node_modules/grpc_tools_node_protoc_ts/bin/protoc-gen-ts')
        }
    }
}

task installProtocPlugins(type: NpmTask) {
    args = ['install', '--no-save', "grpc-tools@${GRPC_TOOLS_VERSION}", "grpc_tools_node_protoc_ts@${GRPC_TOOLS_TS_VERSION}"]

    inputs.property 'grpc-tools-version', GRPC_TOOLS_VERSION
    inputs.property 'grpc-tools-ts-version', GRPC_TOOLS_TS_VERSION

    outputs.dir 'node_modules/grpc-tools'
    outputs.dir 'node_modules/grpc_tools_node_protoc_ts'
}

task generatePackageJson {
    inputs.files 'package-template.json'

    doFirst {
        def packageTemplate = file('package-template.json').text
        packageTemplate = packageTemplate.replaceFirst('\\|GRPC_VERSION\\|', GRPC_VERSION)
                .replaceFirst('\\|GOOGLE_PROTOBUF_VERSION\\|', GOOGLE_PROTOBUF_VERSION)
        file('build/web/package.json').text = packageTemplate
    }
}

task publish(type: NpmTask) {
    dependsOn 'build'
    args = ['publish', '--access=public']
    workingDir = file('build/web')
}

node {
    version = '8.11.4'
    yarnVersion = '1.9.4'
    download = true
}

tasks.clean {
    delete file('node_modules')
}

afterEvaluate {
    tasks.generateProto.dependsOn installProtocPlugins
    tasks.generateProto.finalizedBy generatePackageJson
}
